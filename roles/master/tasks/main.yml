---
# tasks file for master

  
- name: Add kube group
  group: name=kube system=yes
#  run_once: true
  
- name: Add kube user
  user: name=kube system=yes shell=/sbin/nologin comment="Kubernetes user" group=kube home=/
#  run_once: true

- name: Determine if general config done
  stat: path={{kube_config_dir}}/config
  register: check_kube_global_configured
  
- name: Generate config if it doesn't exist
  include: config.yml
  when: not check_kube_global_configured.stat.exists

# It's for generating certificate
- name: Determine if certificate configured
  stat: path={{ kube_cert_dir }}/ca.crt
  register: check_ca_configured
  
- name: Configure certificate if it doesn't exist
  include: secrets.yml
  when: not check_ca_configured.stat.exists
  
- name: Read back the CA certificate
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['kube-masters'][0] }}"

- name: Register the CA certificate as a fact so it can be used later
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: Place CA certificate everywhere
  copy: content="{{ kube_ca_cert }}" dest="{{ kube_cert_dir }}/ca.crt"

# Determine if APIserver is installed  
 
- name: Determine if apiserver configured
  stat: path={{kube_config_dir}}/config/apiserver
  register: check_apiserver_configured
  always_run: yes
  
- name: Install apiserver if it doesn't exist
  include: apiserver.yml
  when: not check_apiserver_configured.stat.exists
  
  
# Determine if controller mananger is installed  
 
- name: Determine if controller-manager configured
  stat: path={{kube_config_dir}}/config/controller-manager
  register: check_controller_configured
  always_run: yes
  
- name: Install controller-manager if it doesn't exist
  include: controller-manager.yml
  when: not check_controller_configured.stat.exists
  
  
# Determine if scheduler is installed  
 
- name: Determine if controller-manager configured
  stat: path={{kube_config_dir}}/config/scheduler
  register: check_scheduler_configured
  always_run: yes
  
- name: Install scheduler if it doesn't exist
  include: scheduler.yml
  when: not check_scheduler_configured.stat.exists
  
- name: Reload systemed
  command: systemctl --system daemon-reload
  
- name: Enable apiserver
  service: name=kube-apiserver enabled=yes state=started

- name: Enable controller-manager
  service: name=kube-controller-manager enabled=yes state=started
  
- name: Enable scheduler
  service: name=kube-scheduler enabled=yes state=started